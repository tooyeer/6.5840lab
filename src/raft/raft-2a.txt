package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"sync"
	"sync/atomic"
	"time"
	//	"6.5840/labgob"
	"6.5840/labrpc"
)

type State int

// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in part 2D you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh, but set CommandValid to false for these
// other uses.
const (
	Leader State = iota
	Condidate
	Follower
)

type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int

	// For 2D:
	SnapshotValid bool
	Snapshot      []byte
	SnapshotTerm  int
	SnapshotIndex int
}
type LogEntry struct {
	Term    int
	Command interface{}
}

// A Go object implementing a single Raft peer.
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.
	applyChan chan ApplyMsg

	voteFor     int
	currentTerm int
	log         []LogEntry
	state       State
	VoteTimer   time.Time

	commitIndex int
	lastApplied int

	nextIndex  []int
	matchIndex []int
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {
	rf.mu.Lock()
	defer rf.mu.Unlock()
	return rf.currentTerm, rf.state == Leader
}

// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
// before you've implemented snapshots, you should pass nil as the
// second argument to persister.Save().
// after you've implemented snapshots, pass the current snapshot
// (or nil if there's not yet a snapshot).
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// raftstate := w.Bytes()
	// rf.persister.Save(raftstate, nil)
}

// restore previously persisted state.
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}

// the service says it has created a snapshot that has
// all info up to and including index. this means the
// service no longer needs the log through (and including)
// that index. Raft should now trim its log as much as possible.
func (rf *Raft) Snapshot(index int, snapshot []byte) {
	// Your code here (2D).

}

// example RequestVote RPC arguments structure.
// field names must start with capital letters!
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term         int
	CandidateId  int
	LastLogIndex int
	LastLogTerm  int
}

// example RequestVote RPC reply structure.
// field names must start with capital letters!
type RequestVoteReply struct {
	// Your data here (2A).
	Term        int
	VoteGranted bool
}

type AppendEntryArgs struct {
	Term         int
	LeaderId     int
	PrevLogIndex int
	PreLogTerm   int
	Entries      []LogEntry
	LeaderCommit int
}

type AppendEntryReply struct {
	Term    int
	Success bool
	UpIndex int
	UpTerm  int
}

// example RequestVote RPC handler.
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
	if rf.killed() {
		return
	}
	rf.mu.Lock()
	defer rf.mu.Unlock()
	defer DPrintf("{Node %v}'s state is {state %v,term %v,commitIndex %v,lastApplied %v,lastLog %v} before processing requestVoteRequest %v and reply requestVoteResponse %v", rf.me, rf.state, rf.currentTerm, rf.commitIndex, rf.lastApplied, rf.getLastLogIndex(), args, reply)
	if rf.currentTerm > args.Term {
		reply.VoteGranted = false
		reply.Term = rf.currentTerm
		return
	}
	if rf.getLastLogTerm() > args.LastLogTerm || rf.getLastLogIndex() > args.LastLogIndex {
		reply.VoteGranted = false
		reply.Term = -1
		return
	}
	if rf.currentTerm == args.Term && rf.voteFor != args.CandidateId {
		reply.VoteGranted = false
		reply.Term = rf.currentTerm
		return
	} else {
		rf.voteFor = args.CandidateId
		rf.state = Follower
		rf.currentTerm = args.Term
		rf.VoteTimer = time.Now()
		reply.Term = args.Term
		reply.VoteGranted = true
		return
	}
}

func (rf *Raft) AppendEntry(args *AppendEntryArgs, reply *AppendEntryReply) {
	if rf.killed() {
		return
	}
	rf.mu.Lock()

	defer DPrintf("{Node %v}'s state is {state %v,term %v,commitIndex %v,lastApplied %v,lastLog %v} before processing AppendEntriesRequest %v and reply AppendEntriesResponse %v", rf.me, rf.state, rf.currentTerm, rf.commitIndex, rf.lastApplied, rf.getLastLogIndex(), args, reply)

	if args.Term > rf.currentTerm {
		reply.Success = false
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return
	}

	rf.state = Follower
	rf.currentTerm = args.Term
	rf.voteFor = -1
	rf.VoteTimer = time.Now()

	if args.PrevLogIndex > rf.getLastLogIndex() {
		reply.UpIndex = rf.getLastLogIndex()
		reply.UpTerm = rf.getLastLogTerm()
		reply.Success = false
		reply.Term = rf.currentTerm
		rf.mu.Unlock()
		return
	} else if rf.getLogTerm(args.PrevLogIndex) != args.PreLogTerm {

	}
	reply.Success = true
	reply.Term = rf.currentTerm
	if args.Entries != nil {
		rf.log = rf.log[:args.PrevLogIndex]
		rf.log = append(rf.log, args.Entries...)
	}
	rf.commitIndex = Min(args.LeaderCommit, rf.getLastLogIndex())
	rf.mu.Unlock()

	return
}

// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).

	return index, term, isLeader
}

// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids the
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

func (rf *Raft) electionTicker() {
	for !rf.killed() {
		nowTime := time.Now()
		time.Sleep(time.Duration(generateOverTime(int64(rf.me))) * time.Millisecond)
		rf.mu.Lock()

		if rf.VoteTimer.Before(nowTime) && rf.state != Leader {
			rf.currentTerm++
			rf.state = Condidate
			rf.voteFor = rf.me
			rf.VoteTimer = time.Now()
			rf.mu.Unlock()
			rf.SendElection()
		} else {
			rf.mu.Unlock()
		}
	}
	return
}

func (rf *Raft) appendTicker() {
	for !rf.killed() {
		time.Sleep(time.Duration(HeartbeatSleep) * time.Millisecond)
		rf.mu.Lock()
		if rf.state == Leader {
			rf.VoteTimer = time.Now()
			rf.mu.Unlock()
			rf.SendAppend()
		} else {
			rf.mu.Unlock()
		}
	}
	return
}

func (rf *Raft) commitTicker() {

}
func (rf *Raft) SendElection() {
	if rf.killed() {
		return
	}
	voteNum := 1
	args := RequestVoteArgs{
		Term:         rf.currentTerm,
		CandidateId:  rf.me,
		LastLogIndex: rf.getLastLogIndex(),
		LastLogTerm:  rf.getLastLogTerm(),
	}
	DPrintf("{Node %v} starts election with RequestVoteRequest %v", rf.me, args)
	for i := 0; i < len(rf.peers); i++ {
		if i == rf.me {
			continue
		}
		go func(peer int) {
			reply := RequestVoteReply{
				Term:        -1,
				VoteGranted: false,
			}
			if rf.sendRequestVote(peer, &args, &reply) != false {
				rf.mu.Lock()
				if reply.VoteGranted == false {
					if reply.Term > rf.currentTerm {
						rf.currentTerm = reply.Term
						rf.state = Follower
						rf.voteFor = -1
					} else if reply.Term == -1 {
						rf.state = Follower
						rf.voteFor = -1
						DPrintf("{Node %v} cannot be Leader\n", rf.me)

					}
					rf.mu.Unlock()
					return
				} else {
					voteNum += 1
					if voteNum > len(rf.peers)/2 {
						voteNum = 0
						rf.state = Leader
						rf.nextIndex = make([]int, len(rf.peers))
						rf.matchIndex = make([]int, len(rf.peers))
						for i := 0; i < len(rf.peers); i++ {
							rf.nextIndex[i] = rf.getLastLogIndex() + 1
							rf.matchIndex[i] = 0
						}
						rf.mu.Unlock()
						rf.SendAppend()
					}
				}
			}
		}(i)
	}
}

func (rf *Raft) SendAppend() {
	if rf.killed() {
		return
	}
	for i := 0; i < len(rf.peers); i++ {
		if i == rf.me {
			continue
		}
		go func(peer int) {
			args := AppendEntryArgs{
				Term:         rf.currentTerm,
				LeaderId:     rf.me,
				PrevLogIndex: 0,
				PreLogTerm:   0,
				Entries:      nil,
				LeaderCommit: rf.commitIndex,
			}
			reply := AppendEntryReply{
				Term:    rf.currentTerm,
				Success: false,
				UpIndex: -1,
				UpTerm:  -1,
			}
			args.Entries = rf.log[rf.nextIndex[peer]-1:]
			if rf.nextIndex[peer] > 1 {
				args.PrevLogIndex = rf.nextIndex[peer] - 1
				args.PreLogTerm = rf.getLogTerm(args.PrevLogIndex)
			}
			if rf.sendAppendEntry(peer, &args, &reply) {

			}
		}(i)
	}
}

// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).

	rf.state = Follower
	rf.currentTerm = 0
	rf.voteFor = -1

	rf.lastApplied = 0
	rf.commitIndex = 0

	rf.VoteTimer = time.Now()

	rf.log = []LogEntry{}
	rf.applyChan = applyCh
	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

	// start ticker goroutine to start elections
	go rf.electionTicker()

	go rf.appendTicker()

	return rf
}
